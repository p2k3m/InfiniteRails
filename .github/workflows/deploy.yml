name: Deploy to AWS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    outputs:
      cloudfront_distribution_id: ${{ steps.discover.outputs.distribution-id }}
      cloudfront_url: ${{ steps.discover.outputs.distribution-domain }}
    steps:
      - name: Validate AWS secrets
        id: validate
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        run: |
          set -euo pipefail
          missing=()
          for var in AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION AWS_S3_BUCKET; do
            if [ -z "${!var:-}" ]; then
              missing+=("$var")
            fi
          done
          if [ ${#missing[@]} -gt 0 ]; then
            printf '::error::Missing required GitHub secret(s): %s' "${missing[*]}"
            {
              echo '### ❌ Deployment blocked'
              echo ''
              echo 'The workflow cannot continue because the following secrets are missing:'
              for name in "${missing[@]}"; do
                echo "- \`${name}\`"
              done
              echo ''
              echo '#### How to fix'
              echo '1. Open **Settings → Secrets and variables → Actions** in this repository.'
              echo '2. Create each secret listed above with the exact name.'
              echo '3. Re-run the workflow from the Actions tab once the secrets are saved.'
            } >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Sync site to S3
        env:
          DEPLOY_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -euo pipefail
          if [ -z "${DEPLOY_BUCKET}" ]; then
            echo '::error::AWS_S3_BUCKET secret resolved to an empty string. Ensure the secret contains the bucket name.'
            exit 1
          fi

          if ! OUTPUT=$(aws s3api head-bucket --bucket "${DEPLOY_BUCKET}" 2>&1); then
            STATUS=$?
            if echo "${OUTPUT}" | grep -q '(404)'; then
              CREATE_ARGS=(--bucket "${DEPLOY_BUCKET}")
              if [ -n "${AWS_REGION:-}" ] && [ "${AWS_REGION}" != "us-east-1" ]; then
                CREATE_ARGS+=(--create-bucket-configuration "LocationConstraint=${AWS_REGION}")
              fi
              aws s3api create-bucket "${CREATE_ARGS[@]}"
              aws s3api wait bucket-exists --bucket "${DEPLOY_BUCKET}"
              {
                echo '### 🪣 Created deployment bucket'
                echo ''
                echo "- Bucket: \`${DEPLOY_BUCKET}\`"
                if [ -n "${AWS_REGION:-}" ]; then
                  echo "- Region: \`${AWS_REGION}\`"
                fi
              } >> "$GITHUB_STEP_SUMMARY"
            elif echo "${OUTPUT}" | grep -q '(301)'; then
              echo "::error::S3 bucket ${DEPLOY_BUCKET} exists in a different region. Set AWS_S3_BUCKET to a bucket in ${AWS_REGION:-your configured region} or update the AWS_REGION secret to match the bucket's location."
              exit 1
            elif echo "${OUTPUT}" | grep -qi 'AccessDenied'; then
              echo "::error::Access denied when checking bucket ${DEPLOY_BUCKET}. Confirm that the IAM user has s3:HeadBucket permissions."
              exit 1
            else
              echo "::error::Failed to access S3 bucket ${DEPLOY_BUCKET}. AWS CLI exited with status ${STATUS}. Output: ${OUTPUT}"
              exit 1
            fi
          fi

          aws s3 sync . "s3://${DEPLOY_BUCKET}" --delete --exclude ".git/*" --exclude ".github/*" --exclude "README.md" --exclude "LICENSE"

      - name: Discover CloudFront distribution
        id: discover
        env:
          DEPLOY_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          set -euo pipefail
          ORIGIN_CLASSIC="${DEPLOY_BUCKET}.s3.amazonaws.com"
          ORIGIN_REGIONAL="${DEPLOY_BUCKET}.s3.${AWS_REGION}.amazonaws.com"
          ORIGIN_WEBSITE="${DEPLOY_BUCKET}.s3-website-${AWS_REGION}.amazonaws.com"
          MATCH=$(aws cloudfront list-distributions --query "DistributionList.Items[?Origins.Items[?DomainName=='${ORIGIN_CLASSIC}' || DomainName=='${ORIGIN_REGIONAL}' || DomainName=='${ORIGIN_WEBSITE}']]|[0]")
          if [ -z "$MATCH" ] || [ "$MATCH" = "null" ]; then
            echo '::error::No CloudFront distribution is configured for the provided S3 bucket.'
            {
              echo '### ❌ CloudFront distribution not found'
              echo ''
              echo "No CloudFront distribution could be matched to bucket \`${DEPLOY_BUCKET}\` in region \`${AWS_REGION}\`."
              echo ''
              echo '#### How to fix'
              echo '1. Create a CloudFront distribution with the S3 bucket as an origin (Origin Access Control recommended).'
              echo '2. Alternatively, ensure an existing distribution origin domain exactly matches one of:'
              echo "   - ${ORIGIN_CLASSIC}"
              echo "   - ${ORIGIN_REGIONAL}"
              echo "   - ${ORIGIN_WEBSITE}"
              echo '3. Re-run this workflow to publish the site once the distribution exists.'
            } >> "$GITHUB_STEP_SUMMARY"
            exit 1
          fi
          CF_ID=$(echo "$MATCH" | jq -r '.Id // empty')
          CF_DOMAIN=$(echo "$MATCH" | jq -r '.DomainName // empty')
          if [ -z "$CF_ID" ] || [ -z "$CF_DOMAIN" ]; then
            echo '::error::CloudFront distribution is missing an Id or DomainName. Inspect the AWS console.'
            exit 1
          fi
          echo "distribution-id=${CF_ID}" >> "$GITHUB_OUTPUT"
          echo "distribution-domain=https://${CF_DOMAIN}" >> "$GITHUB_OUTPUT"
          {
            echo '### ✅ CloudFront distribution detected'
            echo ''
            echo "- **Distribution ID**: \`${CF_ID}\`"
            echo "- **CloudFront URL**: https://${CF_DOMAIN}"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Invalidate CloudFront cache
        env:
          DISTRIBUTION_ID: ${{ steps.discover.outputs.distribution-id }}
        run: |
          set -euo pipefail
          if [ -z "${DISTRIBUTION_ID}" ]; then
            echo '::error::CloudFront distribution ID is empty. Check the discovery step output.'
            exit 1
          fi
          aws cloudfront create-invalidation --distribution-id "$DISTRIBUTION_ID" --paths '/*'

      - name: Announce deployment URL
        run: |
          set -euo pipefail
          echo "::notice::Deployment available at ${{ steps.discover.outputs.distribution-domain }}"
          {
            echo '### 🌐 Play the latest build'
            echo ''
            echo "- CloudFront URL: ${{ steps.discover.outputs.distribution-domain }}"
            echo "- Distribution ID: \`${{ steps.discover.outputs.distribution-id }}\`"
          } >> "$GITHUB_STEP_SUMMARY"
