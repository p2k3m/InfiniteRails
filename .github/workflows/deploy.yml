name: Deploy to AWS

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Sync static site
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate deployment secrets
        env:
          REQUIRED_SECRETS: >-
            AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_REGION AWS_S3_BUCKET
            CLOUDFRONT_DISTRIBUTION_ID CLOUDFRONT_URL
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          CLOUDFRONT_URL: ${{ secrets.CLOUDFRONT_URL }}
        run: |
          missing=()
          for name in $REQUIRED_SECRETS; do
            value=$(printf '%s' "${!name}")
            if [ -z "$value" ]; then
              missing+=("$name")
            fi
          done
          if [ ${#missing[@]} -gt 0 ]; then
            echo "::error::Missing required secrets: ${missing[*]}" >&2
            echo "Add each secret in GitHub ‚Üí Settings ‚Üí Secrets and variables ‚Üí Actions." >&2
            for name in "${missing[@]}"; do
              case "$name" in
                AWS_ACCESS_KEY_ID|AWS_SECRET_ACCESS_KEY)
                  echo "::error::$name is empty. Create an IAM user with programmatic access and paste its key pair." >&2
                  ;;
                AWS_REGION)
                  echo "::error::$name is empty. Set it to the AWS region of your S3 bucket (for example, us-east-1)." >&2
                  ;;
                AWS_S3_BUCKET)
                  echo "::error::$name is empty. Provide the target bucket name without the s3:// prefix." >&2
                  ;;
                CLOUDFRONT_DISTRIBUTION_ID)
                  echo "::error::$name is empty. Provide the CloudFront distribution ID to invalidate." >&2
                  ;;
                CLOUDFRONT_URL)
                  echo "::error::$name is empty. Provide the public CloudFront URL so the workflow can announce it." >&2
                  ;;
              esac
            done
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload site to S3
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        run: |
          aws s3 sync . "s3://${AWS_S3_BUCKET}" \
            --delete \
            --exclude ".git/*" \
            --exclude ".github/*"

      - name: Invalidate CloudFront cache
        env:
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "$CLOUDFRONT_DISTRIBUTION_ID" \
            --paths '/*'

      - name: Publish deployment URL
        env:
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
          CLOUDFRONT_URL: ${{ secrets.CLOUDFRONT_URL }}
        run: |
          cat <<'SUMMARY' >> "$GITHUB_STEP_SUMMARY"
          ## Infinite Rails Deployment
          - ‚úÖ Site synced to **${AWS_S3_BUCKET}**
          - ‚úÖ CloudFront invalidated (**${CLOUDFRONT_DISTRIBUTION_ID}**)
          - üåê Play it live: **${CLOUDFRONT_URL}**
          SUMMARY
          echo "CloudFront URL: ${CLOUDFRONT_URL}"
